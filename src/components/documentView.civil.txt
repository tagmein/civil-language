'

.document-view {
 background-color: #404040;
 border-bottom: none;
 box-shadow: 0 0 20px #80808080;
 display: flex;
 flex-direction: row;
 flex-grow: 1;
 margin: 0;
}

body.editor-enabled .document-view {
 margin: 19px 19px 0 19px;
}

.document-view > .editor {
 display: none;
 height: calc(100vh - 59px);
 width: 50%;
}

.document-view > .editor-simple {
 border: 1px solid #606060;
 border-right: none;
 display: none;
 height: calc(100vh - 57px);
 position: relative;
 top: -1px;
 width: 50%;
}

body.editor-enabled[data-editor-size="1"] .document-view > .editor,
body.editor-enabled[data-editor-size="1"] .document-view > .editor-simple {
 width: 25%;
}

body.editor-enabled[data-editor-size="3"] .document-view > .editor,
body.editor-enabled[data-editor-size="3"] .document-view > .editor-simple {
 width: 75%;
}

body.editor-enabled[data-editor-size="4"] .document-view > .editor,
body.editor-enabled[data-editor-size="4"] .document-view > .editor-simple {
 width: 100%;
}

body.editor-enabled .document-view > .editor,
body.editor-enabled .document-view > .editor-simple {
 display: block;
}

.document-view-preview {
 background-color: #303030;
 border: none;
 box-shadow: inset 0 0 40px #00000060;
 box-sizing: border-box;
 overflow: auto;
 width: 100%;
}

body.editor-enabled .document-view-preview {
 border: 1px solid #606060;
 height: calc(100vh - 57px);
 width: 50%;
}

body.editor-enabled[data-editor-size="1"] .document-view-preview {
 width: 75%;
}

body.editor-enabled[data-editor-size="3"] .document-view-preview {
 width: 25%;
}

body.editor-enabled[data-editor-size="4"] .document-view-preview {
 display: none;
}

' @ addStyle !

.. '' >> area textContent
.. .. '/' >> -- path
.. $path = '' ?
.. $path @ Documents get ! >> activeDocument
.. .. .. '/' , '' @ -- -- saveDocument !
.. .. $-- path = '/' ?
.. .. $-- path @ -- Documents get ! >> -- activeDocument
.. $activeDocument ~ ?
.. # 'Editing document' , $activeDocument @ -- console log !
.. div @ -- document createElement ! >> view
.. document-view @ view classList add !
.. iframe @ -- document createElement ! >> preview
.. document-view-preview @ preview classList add !
.. .. $-- activeDocument value @ -- -- JSON stringify ! >> previewCode
.. .. '<!doctype html>
<html>
 <head>
  <script src="./civil.js"></script>
  <style>
   body {
    box-sizing: border-box;
    margin: 0;
    min-height: 100vh;
    padding: 0 10px;
    overflow: auto;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
   }
   h1, h2, h3, h4, h5, h6, p {
    margin: 10px 0;
   }
   html {
    height: 100vh;
   }
   body, input, select, textarea, button, a {
    color: #ffffff;
    font-family: sans-serif;
    font-size: 14px;
    font-weight: 500;
    letter-spacing: 0.25px;
    line-height: 1.5;
   }
   input, select, textarea, button {
    background-color: #404040;
    border: 1px solid #808080;
   }
   button, .button {
    cursor: pointer;
   }
   button:hover, .button:hover {
    background-color: #505050;
   }
   button:active, .button:active {
    background-color: #303030;
   }
   *::selection {
    background-color: #a0a0a0;
    color: #ffffff;
   }
  </style>
 </head>
 <body>
  <script>
   globalThis.blob = (...x) => new Blob(...x)
   globalThis.date = x => typeof x === \'undefined\' ? new Date() : new Date(x)
   globalThis.fileReader = x => new FileReader(x)
   globalThis.promise = x => new Promise(x)
   globalThis.typeOf = x => typeof x
   let apiRequestUniqueId = 0
   const apiRequestMap = new Map()
   addEventListener(\'message\', function (message) {
    if (apiRequestMap.has(message.data.requestId)) {
     const apiRequest = apiRequestMap.get(message.data.requestId)
     if (\'data\' in message.data) {
      apiRequest.resolve(message.data.data)
     }
     else {
      apiRequest.reject(message.data.error)
     }
    }
   })
   globalThis.civilApi = {
    makeApiRequest: async function namedArguments(message) {
     if (message === civil.namedArguments) {
      return [ \'message\' ]
     }
     const requestId = apiRequestUniqueId++
     return new Promise(function (_resolve, _reject) {
      function resolve(x) {
       _resolve(x)
       apiRequestMap.delete(requestId)
      }
      function reject(x) {
       _reject(x)
       apiRequestMap.delete(requestId)
      }
      apiRequestMap.set(requestId, { resolve, reject })
      top.postMessage({
       ...message,
       requestId
      })
     })
    },
    read: async function namedArguments(path) {
     if (path === civil.namedArguments) {
      return [ \'path\' ]
     }
     return globalThis.civilApi.makeApiRequest({
      data: { path },
      type: \'read\',
     })
    },
    readDir: async function namedArguments(path) {
     if (path === civil.namedArguments) {
      return [ \'path\' ]
     }
     return globalThis.civilApi.makeApiRequest({
      data: { path },
      type: \'readDir\',
     })
    },
    readDirNames: async function namedArguments(path) {
     if (path === civil.namedArguments) {
      return [ \'path\' ]
     }
     return globalThis.civilApi.makeApiRequest({
      data: { path },
      type: \'readDirNames\',
     })
    },
    readView: async function namedArguments(path, viewPath) {
     if (path === civil.namedArguments) {
      return [ \'path\',  \'viewPath\' ]
     }

     return globalThis.civilApi.makeApiRequest({
      data: { path, viewPath },
      type: \'readView\',
     })
    },
    run: async function namedArguments(path) {
     if (path === civil.namedArguments) {
      return [ \'path\' ]
     }

     const civilDocument = await globalThis.civilApi.read(path)
     return await globalThis.main.run(civilDocument.value)
    },
    runView: async function namedArguments(path, viewPath) {
     if (path === civil.namedArguments) {
      return [ \'path\', \'viewPath\' ]
     }

     const viewDocument = await globalThis.civilApi.readView(path, viewPath)
     return await globalThis.main.run(viewDocument.value)
    },
    write: async function namedArguments(path, value, additionalProperties) {
     if (path === civil.namedArguments) {
      return [ \'path\', \'value\', \'additionalProperties\' ]
     }

     return globalThis.civilApi.makeApiRequest({
      data: { path, value, additionalProperties },
      type: \'write\',
     })
    },
   }
   globalThis.main = civil.scope(globalThis)
   main.run($previewCode )
  </script>
 </body>
</html>' >> -- preview srcdoc
.. << >> renderPreview
.. .. $-- activeDocument value >> preSaveValue
.. .. .. $-- newValue >> -- -- activeDocument value
.. .. .. $-- -- activeDocument id , $-- -- activeDocument value \
          @ -- -- saveDocument !
.. .. .. $-- -- renderPreview !
.. .. $newValue ~= $preSaveValue ?
.. .. .. .. $-- -- -- activeDocument name @ -- -- -- -- decodeURIComponent ! >> decodedName
.. .. .. .. 'No changes to save for \'$decodedName \'' @ -- -- -- -- newsFeed news !~
.. .. .. $-- newValue = $-- preSaveValue ?
.. .. $manualSave = 1 ?
.. << newValue manualSave >> onUpdateActiveValue
.. $activeDocument value , $onUpdateActiveValue , $components \
    @ components editorSimple ! >> code
.. $code container @ view appendChild !
.. $preview @ view appendChild !
.. $view @ area appendChild !
.. $code container focus !
.. $renderPreview !
.. $-- Object ! >> control
.. $renderPreview >> control reset
.. $control
<< path area Documents saveDocument renameDocument components

