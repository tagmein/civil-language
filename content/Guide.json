{"":{"value":".. /components/$name @ -- civil api run ! >> -- $name\n<< name : global-style header link list paragraph \\\n syntax-highlight !\n\n'Civil Language' @ header !\n'Civil is a minimalist alternative to JavaScript, with a companion development environment.' @ paragraph !\n\nblockquote @ document createElement ! >> disclaimer\ndisclaimer @ disclaimer classList add !\n'Civil is a work in progress and is NOT ready for any production usage.\n Feedback is welcome, please email nate@tagme.in to report bugs or offer suggestions.' >> disclaimer textContent\n$disclaimer @ document body appendChild !\n\n'Demos' , h2 @ header !\n\ndiv @ document createElement ! >> demos\ndemos @ demos classList add !\n$demos @ document body appendChild !\n/demo/counter , Counter @ link ! @ demos appendChild !\n\n'Using the editor' , h2 @ header !\n'Code is organized into nodes, each node has content and additional nodes contained within it. Nodes are visible as layers.\nWhen you open a node, all layers above it are also present.' @ paragraph !\n'Press the Ã— button to close a level. The topmost level can not be closed.' @ paragraph !\n'The Open toggle sets whether or not the editor and node tree are visible.' @ paragraph !\n'The Large toggle increases the size of the layer.' @ paragraph !\n'The Active toggle runs the code in a preview window. This is how you can preview applications built in Civil.' @ paragraph !\n'The toggles can be used together or independently to achieve various editor layouts.' @ paragraph !\n'When editing a node at a lower layer, all nodes above that have the Active toggle enabled are refreshed.\nThis is so you can edit a component and see how it affects the primary node.' @ paragraph !\n\n'Language' , h2 @ header !\n'Civil is designed to be simple for the mind to process and understand as it is read.\nIt is designed to be easily communicated to another person over an audio connection.' @ paragraph !\n/introduction/language-features @ civil api run !\n\n'Operators' , h2 @ header !\n/introduction/operators @ civil api run !\n\n'Examples' , h2 @ header !\n/introduction/examples @ civil api run !\n\n# guide-version 2023-08-21","extra":{"created":1692370286498,"active":true,"expanded":true,"large":false}},"/components":{"value":"","extra":{"created":1692577192204,"expanded":false}},"/components/global-style":{"value":"style @ document createElement ! >> element\n'\nbody {\n font-family: sans-serif;\n letter-spacing: 0.25px;\n line-height: 2;\n}\n\ntable {\n border-collapse: collapse;\n width: 100%;\n}\n\nul {\n margin: 0;\n}\n\nth, td {\n border: 1px solid #606060;\n padding: 4px 8px;\n vertical-align: top;\n}\n\ntd code {\n font-size: 13px;\n white-space: pre;\n}\n\ntd.code {\n background-color: #202020;\n}\n\n.disclaimer {\n background-color: #602020;\n color: #f0c0c0;\n padding: 20px;\n border-left: 10px solid #804040;\n}\n\n.demos {\n display: flex;\n flex-direction: row;\n gap: 10px;\n}\n\n.demos a {\n background-color: #808080;\n border-radius: 5px;\n display: block;\n padding: 10px 12px;\n text-decoration: none;\n}\n' >> element textContent\n$element @ document head appendChild !\n","extra":{"created":1692577845133,"expanded":true}},"/components/global-style/demo":{"value":"","extra":{}},"/components/global-style/demo/counter":{"value":"","extra":{"created":1692631967704,"expanded":true}},"/components/header":{"value":".. .. h1 >> -- level\n.. $level ~ ?\n.. $level @ -- document createElement ! >> element\n.. $text >> element textContent\n.. $element @ -- document body appendChild !\n.. $element\n<< text level\n","extra":{"created":1692577196557,"expanded":true}},"/components/link":{"value":".. a @ -- document createElement ! >> link-element\n.. $label >> link-element textContent\n.. href , $path @ link-element setAttribute !\n.. $link-element\n<< path label\n","extra":{"created":1692631492637,"expanded":true,"view":""}},"/components/list":{"value":".. ul @ -- document createElement ! >> container\n.. .. li @ -- -- document createElement ! >> item\n.. .. $text >> item textContent\n.. .. $item @ -- container appendChild !\n.. << text @ creator !\n.. $container @ -- document body appendChild !\n<< creator\n","extra":{"created":1692577194123,"expanded":true}},"/components/paragraph":{"value":".. p @ -- document createElement ! >> element\n.. $text >> element textContent\n.. $element @ -- document body appendChild !\n.. $element\n<< text\n","extra":{}},"/components/syntax-highlight":{"value":"style @ document createElement ! >> highlight-style\n'\n.syntax-highlight {\n display: block;\n background-color: transparent;\n border: none;\n box-sizing: border-box;\n line-height: 2;\n font-family: monospace;\n height: 100%;\n overflow: visible;\n width: 100%;\n white-space: pre;\n}\n\n.syntax-highlight span {\n color: #808080;\n position: relative;\n}\n\n.syntax-highlight span[title] {\n border: 4px solid transparent;\n margin: -4px;\n z-index: 1;\n}\n\n.syntax-highlight span[data-type=\"0\"] {\n color: #ffffff;\n}\n.syntax-highlight span[data-type=\"1\"] {\n color: #f0c000;\n}\n.syntax-highlight span[data-type=\"2\"] {\n color: #c08000;\n}\n.syntax-highlight span[data-type=\"3\"] {\n color: #808080;\n}\n.syntax-highlight span[data-civil=\"symbol\"] {\n color: #20c0c0;\n}\n.syntax-highlight span[data-civil=\"symbol\"]:hover {\n background-color: #20c0c040;\n}\n.syntax-highlight span[data-civil=\"comment\"] {\n color: #808080;\n}\n.syntax-highlight span[data-civil=\"integer\"] {\n color: #f02000;\n}\n.syntax-highlight span[data-civil=\"float\"] {\n color: #f02000;\n}\n' >> highlight-style textContent\n$highlight-style @ document head appendChild !\n\n.. code @ -- document createElement ! >> container\n.. syntax-highlight @ container classList add !\n.. $code , 1 @ -- civil parse ! >> lines\n.. .. # $line @ -- -- console log !\n.. .. .. span @ -- -- -- document createElement ! >> span\n.. .. .. 1 @ token substring ! >> token-value >> span textContent\n.. .. .. data-type , $token 0 @ span setAttribute !\n.. .. .. .. data-civil , symbol @ -- span setAttribute !\n.. .. .. .. Usage: @ -- -- -- -- civil states $--\\ token-value title split ! >> title\n.. .. .. .. title , $title 0 @ -- span setAttribute !\n.. .. .. $token-value @ -- -- -- civil states hasOwnProperty ! ?\n.. .. .. $token-value , 10 @ -- -- -- parseFloat ! >> token-float\n.. .. .. .. data-civil , float @ -- span setAttribute !\n.. .. .. 10 @ token-float toString ! = $token-value ?\n.. .. .. $token-value , 10 @ -- -- -- parseInt ! >> token-int\n.. .. .. .. data-civil , integer @ -- span setAttribute !\n.. .. .. 10 @ token-int toString ! = $token-value ?\n.. .. .. .. data-civil , comment @ -- span setAttribute !\n.. .. .. $-- is-comment ?\n.. .. .. .. 1 >> -- -- is-comment\n.. .. .. $token-value = '#' ?\n.. .. .. $span @ -- -- container appendChild ! \n.. .. << token :: line !\n.. .. br @ -- -- document createElement ! >> br\n.. .. $br @ -- container appendChild ! \n.. << line :: lines !\n.. $container\n<< code\n","extra":{"created":1692578450965,"active":false,"expanded":true,"large":true,"view":""}},"/demo":{"value":"","extra":{"created":1692593025461,"expanded":true,"view":""}},"/demo/counter":{"value":"# style utility function\n.. style @ -- document createElement ! >> style-element\n.. $styles >> style-element textContent\n.. $style-element @ -- document head appendChild !\n<< styles >> add-style\n\n# div utility function - create a div with css class\n.. div @ -- document createElement ! >> element\n.. $className @ element classList add !\n.. $element # return the div\n<< className >> div-with-class\n\n# add css styles\n'\nbody {\n display: grid;\n align-items: center;\n justify-content: center;\n height: 100%;\n width: 100%;\n margin: 0;\n padding: 0;\n}\n.counter {\n background-color: #505050;\n border-radius: 10px;\n border: 1px solid #808080;\n display: flex;\n flex-direction: column;\n height: 50vh;\n width: 50vw;\n overflow: hidden;\n}\n.value {\n display: grid;\n align-items: center;\n justify-content: center;\n flex-grow: 1;\n flex-shrink: 1;\n line-height: 0;\n font-size: 15vh;\n}\n.buttons {\n height: 15vh;\n flex-shrink: 0;\n display: flex;\n flex-direction: row;\n}\n.buttons button {\n border: 2px solid #606060;\n display: grid;\n align-items: center;\n justify-content: center;\n flex-grow: 1;\n font-size: 10vh;\n line-height: 0;\n}\n' @ add-style !\n\n# counter component function\n.. # create a container div with the css class 'counter'\n.. counter @ -- div-with-class ! >> container\n.. # create an element to display the value\n.. value @ -- div-with-class ! >> value-display\n.. # create a function that will update the display\n.. .. $-- current-value >> -- value-display textContent\n.. << >> update-display\n.. # helper function to adjust the value and update the display\n.. .. $-- current-value + $adjustment >> -- current-value\n.. .. $-- update-display !\n.. << adjustment >> adjust-value\n.. # create an element to hold the buttons\n.. buttons @ -- div-with-class ! >> buttons\n.. # helper function to add a button\n.. .. # create a button element\n.. .. button @ -- -- document createElement ! >> new-button\n.. .. # set the button label\n.. .. $label >> new-button textContent\n.. .. # add the click handler\n.. .. click , $on-click @ new-button addEventListener !\n.. .. # add the button to the buttons element\n.. .. $new-button @ -- buttons appendChild !\n.. << on-click label >> add-button\n.. # create a button that subtracts 1\n.. -1 @ adjust-value , '-' @ add-button !\n.. # create a button that adds 1\n.. 1 @ adjust-value , '+' @ add-button !\n.. # add the value display and buttons to the container\n.. $value-display @ container appendChild !\n.. $buttons @ container appendChild !\n.. # display the current value\n.. $update-display !\n.. # return the container\n.. $container\n<< current-value >> counter\n\n# create counter instance starting at 0 and add to body\n0 @ counter ! @ document body appendChild !\n","extra":{"created":1692593031580,"active":true,"expanded":true,"large":true,"view":""}},"/introduction":{"value":"","extra":{"created":1692578215516,"expanded":true}},"/introduction/examples":{"value":"'Comparison between Civil and JavaScript for common operations:' @ paragraph !\ntable @ document createElement ! >> introTable\n$introTable @ document body appendChild !\ntr @ document createElement ! >> introTableHeader\n$introTableHeader @ introTable appendChild !\n\n.. th @ -- document createElement ! >> headerCell\n.. $text >> headerCell textContent\n.. $headerCell @ -- introTableHeader appendChild !\n<< text : Topic JavaScript Civil !\n\n.. tr @ -- document createElement ! >> tableRow\n.. span @ -- document createElement ! >> topic-span\n.. $topic >> topic-span textContent\n.. code @ -- document createElement ! >> js-code\n.. $js >> js-code textContent\n.. $civil @ -- syntax-highlight ! >> civil-code\n.. .. td @ -- -- document createElement ! >> cell\n.. .. $element @ cell appendChild !\n.. .. $element tagName toLowerCase ! @ cell classList add !\n.. .. $cell @ -- tableRow appendChild !\n.. << element : $topic-span $js-code $civil-code !\n.. $tableRow @ -- introTable appendChild !\n<< topic js civil >> introTableRow\n\n'Assignment to a variable' , \\\n 'let x = 5' , '5 >> x' @ introTableRow !\n\n'Assign the results of an expression to a variable' , \\\n 'let x = 5 + 4' , '5 + 4 >> x' @ introTableRow !\n\n'Log the literal string \\'x\\'' , \\\n 'console.log(\\'x\\')' , 'x @ console log !' @ introTableRow !\n\n'Log the value of a variable' , \\\n 'console.log(x)' , '\\$x @ console log !' @ introTableRow !\n\n'Bind a function argument to log the string \\'x\\', store the bound function in a variable, and invoke' , \\\n 'let y = console.log.bind(console, \\'x\\')\\ny()' , 'x @ console log >> y\\ny !' @ introTableRow !\n\n'Create an empty array and assign to a variable' , \\\n 'let items = []' , '\\$Array ! >> items' @ introTableRow !\n\n'Create an empty array, assign to a variable, and add items' , \\\n 'let items = []\\nitems.push(1)\\nitems.push(2)\\nitems.push(3)' , \\\n '\\$Array ! >> items\\n1 @ items push !\\n2 @ items push !\\n3 @ items push !' @ introTableRow !\n\n'Create an object with properties and assign to a variable' , \\\n 'let person = {\\n firstName: \\'Dennis\\',\\n lastName: \\'Borkman\\',\\n age: 23\\n}' , \\\n '\\$Object ! >> person\\n.. Dennis  >> firstName\\n.. Borkman >> lastName\\n.. 23      >> age\\n@> person' @ introTableRow !\n","extra":{"created":1692579128727,"expanded":true}},"/introduction/language-features":{"value":"'Here are some of the features of Civil:' @ paragraph !\n.. 'Space-separated words with minimal syntax characters' @ item !\n.. 'Words are strings by default, quote marks (\\') are only required when there are spaces in a string.' @ item !\n.. 'Functions are created using the .. operator, which starts a recording.' @ item !\n.. 'Functions are only invoked when followed by the ! operator.' @ item !\n.. 'Asynchronous operations are automatically awaited, no need for an await keyword. If you need raw access to a promise, invoke a function with !- as this will return a promise instead of awaiting the result.' @ item !\n.. 'No implicit parent scope variable access, use the -- operator to read from or write to a parent scope.' @ item !\n<< item @ list !\n","extra":{"created":1692578216805,"expanded":true}},"/introduction/operators":{"value":"'Civil syntax operators:' @ paragraph !\ntable @ document createElement ! >> operatorsTable\n$operatorsTable @ document body appendChild !\ntr @ document createElement ! >> operatorsTableHeader\n$operatorsTableHeader @ operatorsTable appendChild !\n\n.. th @ -- document createElement ! >> headerCell\n.. $text >> headerCell textContent\n.. $headerCell @ -- operatorsTableHeader appendChild !\n<< text : Symbol Description 'Example Code' !\n\n.. tr @ -- document createElement ! >> tableRow\n.. span @ -- document createElement ! >> topic-span\n.. $topic >> topic-span textContent\n.. $character @ -- syntax-highlight ! >> symbol\n.. $civil @ -- syntax-highlight ! >> civil-code\n.. .. td @ -- -- document createElement ! >> cell\n.. .. $element @ cell appendChild !\n.. .. $element tagName toLowerCase ! @ cell classList add !\n.. .. $cell @ -- tableRow appendChild !\n.. << element : $symbol $topic-span $civil-code !\n.. $tableRow @ -- operatorsTable appendChild !\n<< topic character civil >> operatorsTableRow\n\n'Escape character, used to create literal \\' with \\\\\\', newline with \\\\n, or continue a line with a \\\\ at the end of the line (result of the example is 9)' , \\\n '\\\\ ' , '5 + \\\\\\n4' @ operatorsTableRow !\n\n'String literal, used to create strings containing a space' , \\\n '\\'' , '\\'This is a long string containing spaces\\'' @ operatorsTableRow !\n\n'Read value from scope' , \\\n '\\$' , 'Bob >> name\\n50 >> age\\n\\'The name is \\$name\\'\\n\\$age + 1' @ operatorsTableRow !\n\n'Pick up result (used to access a property of a prior expression, example result is lowercase hello)' , \\\n '.' , 'Hello toUpperCase ! . toLowerCase !' @ operatorsTableRow !\n\n'Queue value as function argument (example logs 4 and 5 on the same line)' , \\\n ',' , '4 , 5 @ console log !' @ operatorsTableRow !\n\n'Boolean not, changes false to true and vice versa (example logs true)' , \\\n '~' , '0 ~ @ console log !' @ operatorsTableRow !\n\n'Run recorded code if condition is met' , \\\n '?' , '.. \\'9 is greater than 8\\' @ -- console log !\\n5 + 4 > 8 ?' @ operatorsTableRow !\n\n'Bind arguments to function (example result is a function, that when invoked logs \\'Hello world\\')' , \\\n '@' , '\\'Hello world\\' @ console log' @ operatorsTableRow !\n\n'Invoke a function, waiting for the result if async (example result is HELLO)' , \\\n '!' , 'hello toUpperCase !' @ operatorsTableRow !\n\n'Invoke a function and do not wait for the result (if async), returning the promise so that it may be used later' , \\\n '!-' , '\\$someLongRunningOperation !-' @ operatorsTableRow !\n\n'Invoke a function and do not wait for the result (if async), returning nothing, there is then no way to inspect the result' , \\\n '!~' , '\\$someLongRunningOperation !~' @ operatorsTableRow !\n\n'Create a new instance of a class (not recommended)' , \\\n '!new' , '\\$Date !new' @ operatorsTableRow !\n\n'Comment (code following # on the same line does nothing)' , \\\n '#' , '# here we add two numbers and store to x\\n3 + 7 >> x' @ operatorsTableRow !\n\n'Record some code, the recorded code can be converted to a function with named arguments with the << operator, or conditionally run with the ? operator (example code result is 7)' , \\\n '..' , '.. \\$y + 5\\n<< y >> add5\\n2 @ add5 !' @ operatorsTableRow !\n\n'Convert recorded code to function with named arguments (example logs Hola, my name is Dora)' , \\\n '<<' , '.. \\'\\$greeting , my name is \\$name !\\' @ \\\\\\n   -- console log !\\n<< greeting name >> greet\\nHola , Dora @ greet !' @ operatorsTableRow !\n\n'Assignment to a variable' , \\\n '>>' , '5 >> x' @ operatorsTableRow !\n\n'Run recorded code in scope (penguin operator)' , \\\n '@>' , '.. \\'1px solid #808080\\' >> border\\n@> document body style' @ operatorsTableRow !\n\n'Run function many times (example logs hello and world separately)' , \\\n ':' , '\\$console log : hello world !' @ operatorsTableRow !\n\n'Run function many times from an array source (example logs 1 and 2 separately)' , \\\n '::' , '\\$Array ! >> myArray\\n1 @ myArray push !\\n2 @ myArray push !\\n\\$console log :: myArray !' @ operatorsTableRow !\n\n'Collect multiple values into a stack (example logs [ 1, 2, 3 ])' , \\\n '&' , '1 & 2 & 3 >> values\\n\\$values @ console log !' @ operatorsTableRow !\n\n'Spread stacked values into standalone arguments, used in conjunction with & (example logs 1 2 3)' , \\\n ',,' , '1 & 2 & 3 >> values\\n\\$values ,, @ console log !\\n\\n# equivalent to\\n1 , 2 , 3 @ console log !' @ operatorsTableRow !\n\n'Not equal (example result is true)' , \\\n '~=' , '5 ~= 4' @ operatorsTableRow !\n\n'Equal (example result is false)' , \\\n '=' , '5 = 4' @ operatorsTableRow !\n\n'Less than (example result is false)' , \\\n '<' , '5 < 4' @ operatorsTableRow !\n\n'Greater than (example result is true)' , \\\n '>' , '5 > 4' @ operatorsTableRow !\n\n'Less than or equal (example result is false)' , \\\n '<=' , '5 <= 4' @ operatorsTableRow !\n\n'Greater than or equal (example result is true)' , \\\n '>=' , '5 >= 4' @ operatorsTableRow !\n\n'Multiply (example result is 20)' , \\\n '*' , '5 * 4' @ operatorsTableRow !\n\n'Divide (example result is 1.25)' , \\\n '/' , '5 / 4' @ operatorsTableRow !\n\n'Integer divide (example result is 1)' , \\\n '//' , '5 // 4' @ operatorsTableRow !\n\n'Add (example result is 9)' , \\\n '+' , '5 + 4' @ operatorsTableRow !\n\n'Subtract (example result is 1)' , \\\n '+' , '5 - 4' @ operatorsTableRow !\n\n'Modulus (example result is 1)' , \\\n '%' , '5 % 4' @ operatorsTableRow !\n","extra":{"created":1692580193015,"expanded":true}}}